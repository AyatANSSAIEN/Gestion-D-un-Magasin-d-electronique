--------------------------------------------------------
--  File created - Friday-March-19-2021   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table ADMIN
--------------------------------------------------------

  CREATE TABLE "ANSSAIEN"."ADMIN" 
   (	"USERNAME" VARCHAR2(20 BYTE), 
	"PASSWORD" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CATEGORIES
--------------------------------------------------------

  CREATE TABLE "ANSSAIEN"."CATEGORIES" 
   (	"CODECAT" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"LIBELLECAT" VARCHAR2(150 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CLIENTS
--------------------------------------------------------

  CREATE TABLE "ANSSAIEN"."CLIENTS" 
   (	"CODECT" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMCT" VARCHAR2(50 BYTE), 
	"ADRESSCT" VARCHAR2(150 BYTE), 
	"VILLECT" VARCHAR2(50 BYTE), 
	"REGIONCT" NUMBER, 
	"EMAILCT" VARCHAR2(70 BYTE), 
	"COMMENTCT" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table FAMILLES
--------------------------------------------------------

  CREATE TABLE "ANSSAIEN"."FAMILLES" 
   (	"CODEFAM" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"LIBELLEFAM" VARCHAR2(150 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table HISTORY
--------------------------------------------------------

  CREATE TABLE "ANSSAIEN"."HISTORY" 
   (	"ORDER_DATE" DATE, 
	"ORDER_ID" NUMBER, 
	"CLIENT_ID" NUMBER, 
	"TOTAL" FLOAT(126), 
	"STATUT" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORDERITEMS
--------------------------------------------------------

  CREATE TABLE "ANSSAIEN"."ORDERITEMS" 
   (	"ORDERID" NUMBER, 
	"ITEMID" VARCHAR2(4 BYTE), 
	"TOTALHT" FLOAT(126), 
	"TOTALTTC" FLOAT(126), 
	"DISCOUNT" FLOAT(126) DEFAULT 0, 
	"QTE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ORDERS
--------------------------------------------------------

  CREATE TABLE "ANSSAIEN"."ORDERS" 
   (	"ORDERID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"CLIENTID" NUMBER, 
	"ORDERDATE" DATE, 
	"TOTAL" FLOAT(126), 
	"SETTLED" VARCHAR2(10 BYTE), 
	"DISCOUNT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRODUCTS
--------------------------------------------------------

  CREATE TABLE "ANSSAIEN"."PRODUCTS" 
   (	"REFMG" VARCHAR2(4 BYTE), 
	"LIBELLEMG" VARCHAR2(150 BYTE), 
	"CATEGORIEMG" NUMBER, 
	"FAMILLEMG" NUMBER, 
	"PUMG" FLOAT(126), 
	"TVAMG" FLOAT(126), 
	"STOCK" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
  GRANT DELETE ON "ANSSAIEN"."PRODUCTS" TO "SYSTEM";
  GRANT INSERT ON "ANSSAIEN"."PRODUCTS" TO "SYSTEM";
  GRANT SELECT ON "ANSSAIEN"."PRODUCTS" TO "SYSTEM";
  GRANT UPDATE ON "ANSSAIEN"."PRODUCTS" TO "SYSTEM";
--------------------------------------------------------
--  DDL for Table REGIONS
--------------------------------------------------------

  CREATE TABLE "ANSSAIEN"."REGIONS" 
   (	"CODERG" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"LIBELLERG" VARCHAR2(150 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
REM INSERTING into ANSSAIEN.ADMIN
SET DEFINE OFF;
Insert into ANSSAIEN.ADMIN (USERNAME,PASSWORD) values ('admin','admin');
REM INSERTING into ANSSAIEN.CATEGORIES
SET DEFINE OFF;
Insert into ANSSAIEN.CATEGORIES (CODECAT,LIBELLECAT) values (1,'RAM');
Insert into ANSSAIEN.CATEGORIES (CODECAT,LIBELLECAT) values (2,'DISQUE DUR EXTERNE');
Insert into ANSSAIEN.CATEGORIES (CODECAT,LIBELLECAT) values (3,'DISQUE DUR INTERNE');
Insert into ANSSAIEN.CATEGORIES (CODECAT,LIBELLECAT) values (4,'DISQUE DUR INTERNE');
Insert into ANSSAIEN.CATEGORIES (CODECAT,LIBELLECAT) values (5,'CARTE GRAPHIQUE');
REM INSERTING into ANSSAIEN.CLIENTS
SET DEFINE OFF;
Insert into ANSSAIEN.CLIENTS (CODECT,NOMCT,ADRESSCT,VILLECT,REGIONCT,EMAILCT,COMMENTCT) values (161,'ayat','tet','tetouan',5,'ayat@gmail.com',null);
Insert into ANSSAIEN.CLIENTS (CODECT,NOMCT,ADRESSCT,VILLECT,REGIONCT,EMAILCT,COMMENTCT) values (162,'ayat','tett','TETOUAN',1,'AYAT@gmail.com',null);
Insert into ANSSAIEN.CLIENTS (CODECT,NOMCT,ADRESSCT,VILLECT,REGIONCT,EMAILCT,COMMENTCT) values (121,'bentajer','Mhanech II','Tetouan',1,'ahmedbentajer@gmail.com','BEST CLIENT ');
Insert into ANSSAIEN.CLIENTS (CODECT,NOMCT,ADRESSCT,VILLECT,REGIONCT,EMAILCT,COMMENTCT) values (122,'esseghiri','Res Naoufal app Maarif','Casablanca',2,'youssef@gmail.com',null);
Insert into ANSSAIEN.CLIENTS (CODECT,NOMCT,ADRESSCT,VILLECT,REGIONCT,EMAILCT,COMMENTCT) values (123,'belmir','Mhanech II','Tetouan',2,'karim@gmail.com',null);
Insert into ANSSAIEN.CLIENTS (CODECT,NOMCT,ADRESSCT,VILLECT,REGIONCT,EMAILCT,COMMENTCT) values (125,'Oussama','M''hanech','Tetouan',1,'oussama@gmail.com',null);
Insert into ANSSAIEN.CLIENTS (CODECT,NOMCT,ADRESSCT,VILLECT,REGIONCT,EMAILCT,COMMENTCT) values (141,'nissrin','romana','tanger',1,'nissrin@gmail.com',null);
Insert into ANSSAIEN.CLIENTS (CODECT,NOMCT,ADRESSCT,VILLECT,REGIONCT,EMAILCT,COMMENTCT) values (124,'Ayat','Acima','tetouan',1,'ayat@gmail.com',null);
Insert into ANSSAIEN.CLIENTS (CODECT,NOMCT,ADRESSCT,VILLECT,REGIONCT,EMAILCT,COMMENTCT) values (181,'Chaymae','m''hannech','Tetouan',1,'chaimae@gmail.com',null);
Insert into ANSSAIEN.CLIENTS (CODECT,NOMCT,ADRESSCT,VILLECT,REGIONCT,EMAILCT,COMMENTCT) values (163,'oussama','mhannesh','tet',1,'oussama@gmail.com',null);
REM INSERTING into ANSSAIEN.FAMILLES
SET DEFINE OFF;
Insert into ANSSAIEN.FAMILLES (CODEFAM,LIBELLEFAM) values (1,'MEMOIRE');
Insert into ANSSAIEN.FAMILLES (CODEFAM,LIBELLEFAM) values (2,'CARTE');
Insert into ANSSAIEN.FAMILLES (CODEFAM,LIBELLEFAM) values (3,'DISQUE');
REM INSERTING into ANSSAIEN.HISTORY
SET DEFINE OFF;
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),221,141,4032,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),222,123,2818.8,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),241,122,8714.16,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),243,125,7700,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),203,121,279061.2,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),261,121,4556.664,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),262,121,5602.3632,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),181,121,6048,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),264,125,1691.9,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),281,123,6300,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),301,122,1088.64,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),302,161,0,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),263,122,3532.9,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),205,121,10080,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),222,123,2818.8,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),204,124,672,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),205,121,10080,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),221,141,4032,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),241,122,8714.16,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),281,123,6300,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),184,124,1545.6,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),202,123,null,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),262,121,5602.3632,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),321,123,1155.168,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),183,125,4569.6,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),201,123,null,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),242,125,0,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),264,125,1658.062,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),182,122,840,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),183,125,4432.512,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),303,161,1209.6,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),184,124,1545.6,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),204,124,672,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),182,122,840,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),182,122,840,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),263,122,3532.9,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),261,121,5062.96,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),282,122,10080,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),282,122,5040,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),303,161,1209.6,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),243,125,6160,'to order');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('19-MAR-21','DD-MON-RR'),321,123,1155.168,'delivered');
Insert into ANSSAIEN.HISTORY (ORDER_DATE,ORDER_ID,CLIENT_ID,TOTAL,STATUT) values (to_date('18-MAR-21','DD-MON-RR'),181,121,5927.04,'to order');
REM INSERTING into ANSSAIEN.ORDERITEMS
SET DEFINE OFF;
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (241,'C80',6552,8714.16,0,12);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (243,'D12',7000,7700,0,200);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (303,'A01',600,672,0,2);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (321,'A01',600,672,0,2);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (184,'A01',900,1008,0,3);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (204,'A01',600,672,0,2);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (262,'D12',350,385,0,10);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (263,'A02',3120,3494.4,0,13);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (221,'A01',3600,4032,0,12);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (261,'D12',350,385,0,10);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (181,'A01',3000,3360,0,20);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (205,'A11',9000,10080,0,12);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (222,'B15',2349,2818.8,0,1);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (261,'A02',2880,3225.6,0,12);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (262,'A02',2880,3225.6,0,12);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (281,'D12',840,924,0,24);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (321,'D12',70,77,4,2);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (182,'A01',1500,1680,50,10);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (183,'A01',1500,1680,20,10);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (264,'D12',805,885.5,0,23);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (261,'C80',1092,1452.36,0,2);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (262,'C80',2184,2904.72,10,4);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (281,'A02',4800,5376,0,20);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (184,'A02',480,537.6,0,2);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (263,'D12',35,38.5,0,1);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (264,'A02',720,806.4,0,3);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (282,'A11',9000,10080,0,12);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (303,'A02',480,537.6,0,2);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (321,'A02',480,537.6,0,2);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (181,'A02',2400,2688,0,10);
Insert into ANSSAIEN.ORDERITEMS (ORDERID,ITEMID,TOTALHT,TOTALTTC,DISCOUNT,QTE) values (183,'A02',2880,3225.6,0,12);
REM INSERTING into ANSSAIEN.ORDERS
SET DEFINE OFF;
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (221,141,to_date('18-MAR-21','DD-MON-RR'),4032,'delivered',0);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (241,122,to_date('18-MAR-21','DD-MON-RR'),8714.16,'delivered',0);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (261,121,to_date('18-MAR-21','DD-MON-RR'),5062.96,'delivered',10);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (262,121,to_date('18-MAR-21','DD-MON-RR'),6224.848,'delivered',50);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (205,121,to_date('18-MAR-21','DD-MON-RR'),10080,'delivered',0);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (222,123,to_date('18-MAR-21','DD-MON-RR'),2818.8,'delivered',0);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (281,123,to_date('19-MAR-21','DD-MON-RR'),6300,'delivered',50);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (321,123,to_date('19-MAR-21','DD-MON-RR'),1283.52,'delivered',10);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (303,161,to_date('19-MAR-21','DD-MON-RR'),1209.6,'delivered',0);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (264,125,to_date('18-MAR-21','DD-MON-RR'),1691.9,'delivered',2);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (183,125,to_date('18-MAR-21','DD-MON-RR'),4569.6,'delivered',3);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (184,124,to_date('18-MAR-21','DD-MON-RR'),1545.6,'delivered',9);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (204,124,to_date('18-MAR-21','DD-MON-RR'),672,'delivered',0);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (182,122,to_date('18-MAR-21','DD-MON-RR'),840,'delivered',2);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (263,122,to_date('18-MAR-21','DD-MON-RR'),3532.9,'delivered',50);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (282,122,to_date('19-MAR-21','DD-MON-RR'),10080,'delivered',50);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (243,125,to_date('18-MAR-21','DD-MON-RR'),7700,'delivered',20);
Insert into ANSSAIEN.ORDERS (ORDERID,CLIENTID,ORDERDATE,TOTAL,SETTLED,DISCOUNT) values (181,121,to_date('18-MAR-21','DD-MON-RR'),6048,'delivered',2);
REM INSERTING into ANSSAIEN.PRODUCTS
SET DEFINE OFF;
Insert into ANSSAIEN.PRODUCTS (REFMG,LIBELLEMG,CATEGORIEMG,FAMILLEMG,PUMG,TVAMG,STOCK) values ('R23','RAM 16GB',1,1,1500,12,200);
Insert into ANSSAIEN.PRODUCTS (REFMG,LIBELLEMG,CATEGORIEMG,FAMILLEMG,PUMG,TVAMG,STOCK) values ('A01','Barrette Memoire 2Go',1,1,300,12,49);
Insert into ANSSAIEN.PRODUCTS (REFMG,LIBELLEMG,CATEGORIEMG,FAMILLEMG,PUMG,TVAMG,STOCK) values ('A02','Barrette Memoire 4Go',1,1,240,12,96);
Insert into ANSSAIEN.PRODUCTS (REFMG,LIBELLEMG,CATEGORIEMG,FAMILLEMG,PUMG,TVAMG,STOCK) values ('B15','Carte Graphique AMD Radeon RX 570 Pulse, 4Go',5,2,2349,20,99);
Insert into ANSSAIEN.PRODUCTS (REFMG,LIBELLEMG,CATEGORIEMG,FAMILLEMG,PUMG,TVAMG,STOCK) values ('A11','Carte son Asus Xonar DG',4,2,750,12,76);
Insert into ANSSAIEN.PRODUCTS (REFMG,LIBELLEMG,CATEGORIEMG,FAMILLEMG,PUMG,TVAMG,STOCK) values ('C80','Disque Externe Toshiba usb 3.0 1000Go',2,3,546,33,82);
Insert into ANSSAIEN.PRODUCTS (REFMG,LIBELLEMG,CATEGORIEMG,FAMILLEMG,PUMG,TVAMG,STOCK) values ('A12','RAM 4GB',1,1,1200,10,210);
Insert into ANSSAIEN.PRODUCTS (REFMG,LIBELLEMG,CATEGORIEMG,FAMILLEMG,PUMG,TVAMG,STOCK) values ('H01','DISQUE DURE 1TO',3,3,600,15,50);
Insert into ANSSAIEN.PRODUCTS (REFMG,LIBELLEMG,CATEGORIEMG,FAMILLEMG,PUMG,TVAMG,STOCK) values ('D12','Ram 8Gb',1,2,35,10,98);
REM INSERTING into ANSSAIEN.REGIONS
SET DEFINE OFF;
Insert into ANSSAIEN.REGIONS (CODERG,LIBELLERG) values (1,'Tanger-Tétouan-Al Hoceïma');
Insert into ANSSAIEN.REGIONS (CODERG,LIBELLERG) values (2,'Région de l Oriental');
Insert into ANSSAIEN.REGIONS (CODERG,LIBELLERG) values (3,'Région de Fès-Meknès');
Insert into ANSSAIEN.REGIONS (CODERG,LIBELLERG) values (4,'Région de Rabat-Salé-Kénitra');
Insert into ANSSAIEN.REGIONS (CODERG,LIBELLERG) values (5,'Région de Béni Mellal-Khénifra');
Insert into ANSSAIEN.REGIONS (CODERG,LIBELLERG) values (6,'Région de Casablanca-Settat');
Insert into ANSSAIEN.REGIONS (CODERG,LIBELLERG) values (7,'Région de Marrakech-Safi');
--------------------------------------------------------
--  DDL for Trigger CHECK_STOCK_DELIVERED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ANSSAIEN"."CHECK_STOCK_DELIVERED" 
before UPDATE OF settled ON ANSSAIEN.orders
FOR EACH ROW
DECLARE
st number;
Cursor c_qte_itm is 
select  itemid,qte  From orderitems where orderid = :new.orderid;
begin
for i in c_qte_itm Loop
Select stock into st from products where refmg = i.itemid;
if st < i.qte then
raise_application_error(
    -20001, 
    'stock not enogh' 
);
end if; 
End loop ;
end;
/
ALTER TRIGGER "ANSSAIEN"."CHECK_STOCK_DELIVERED" ENABLE;
--------------------------------------------------------
--  DDL for Trigger INSERT_HISTO_DELIVERED
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ANSSAIEN"."INSERT_HISTO_DELIVERED" 
AFTER UPDATE OF settled ON ANSSAIEN.orders
FOR EACH ROW
DECLARE
begin
insert into history values (sysDate,:new.orderid ,:new.clientid, :new.total*(1-:new.discount/100),'delivered');
end;
/
ALTER TRIGGER "ANSSAIEN"."INSERT_HISTO_DELIVERED" ENABLE;
--------------------------------------------------------
--  DDL for Trigger INSERT_HISTO_TO_ORDER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ANSSAIEN"."INSERT_HISTO_TO_ORDER" 
AFTER INSERT ON ANSSAIEN.orders
FOR EACH ROW
DECLARE
order_row ANSSAIEN.orders%rowtype;
begin
insert into history values (sysDate,:new.orderid ,:new.clientid, :new.total,'to order');
end;
/
ALTER TRIGGER "ANSSAIEN"."INSERT_HISTO_TO_ORDER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger UPDATE_STOCK
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "ANSSAIEN"."UPDATE_STOCK" 
AFTER UPDATE OF settled ON ANSSAIEN.orders
FOR EACH ROW
DECLARE
Cursor c_qte_itm is 
select  itemid,qte  From orderitems where orderid = :new.orderid;
begin
for i in c_qte_itm Loop
update products set stock = stock - i.qte where refmg = i.itemid;
End loop ;
end;
/
ALTER TRIGGER "ANSSAIEN"."UPDATE_STOCK" ENABLE;
--------------------------------------------------------
--  DDL for Procedure ARTICLE_BY_CAT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."ARTICLE_BY_CAT" (rowCat out SYS_REFCURSOR)
IS
begin
open rowCat for
SELECT libellecat,categoriemg,count(categoriemg)  FROM products
RIGHT OUTER JOIN  categories on categories.codecat = products.categoriemg
group by categoriemg,libellecat ;
end;

/
--------------------------------------------------------
--  DDL for Procedure ARTICLE_BY_FAM
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."ARTICLE_BY_FAM" (rowCat out SYS_REFCURSOR)
IS
begin
open rowCat for
SELECT libellefam,famillemg,count(famillemg)  FROM products
RIGHT OUTER join familles on familles.codeFam = products.famillemg
group by famillemg,libellefam ;
end;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_ORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."DELETE_ORDER" is 
maxid number;
begin
select max(orderid) into maxid from orders;
delete from orderitems where orderid  = maxid;
delete from orders where orderid  = maxid;
end;

/
--------------------------------------------------------
--  DDL for Procedure EURO_AND_DOLLAR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."EURO_AND_DOLLAR" (amount IN float ,v_dollar out float , v_euro out float)
IS 
BEGIN
v_dollar := amount * 8;
v_euro := amount * 10;
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERT_CLIENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."INSERT_CLIENT" (nom in clients.nomct%type, adrss in clients.adressct%type,ville in  clients.villect%type ,region in NUMBER , email in clients.emailct%type ) 
IS
begin 
Insert into clients (nomCt,adressCt,villeCt,regionCt,emailCt) values (nom,adrss,ville,region,email);
end;

/
--------------------------------------------------------
--  DDL for Procedure INSERT_ORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."INSERT_ORDER" (clientID IN  NUMBER ,dis in float )
IS
BEGIN
INSERT INTO orders(clientID,orderdate,total,settled,discount) VALUES(clientID,SYSDATE,0,'to order',dis);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERT_ORDERITEM
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."INSERT_ORDERITEM" (itemid in  products.refmg%type,qte in NUMBER )
IS
pu number;
tva number;
id_o number;
BEGIN
select pumg,tvamg into pu,tva from products where refmg = itemid;
select max(orderid) into id_o from orders ; 
INSERT INTO orderitems(orderid,itemid,totalht,totalttc,discount,qte) VALUES(id_o,itemid,qte*pu,(qte*pu)*(1+tva/100),0,qte);
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERT_PRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."INSERT_PRODUCT" (refmg IN products.refmg%type ,wording IN products.libellemg%type,categorie IN NUMBER,familly IN NUMBER,priceUnit IN FLOAT,tva IN FLOAT,stock in number)
IS
BEGIN
INSERT INTO products(refMg,libelleMg,categorieMg,FamilleMg,PUMg,TVAMg,STOCK) VALUES(refmg,wording,categorie,familly,priceUnit,tva,stock);
END;

/
--------------------------------------------------------
--  DDL for Procedure IS_ADMIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."IS_ADMIN" (user_name in  admin.username%type, pass in admin.password%type , exist out number)
IS
CURSOR c_admin is SELECT * from ANSSAIEN.admin where ( username = user_name AND password = pass );

BEGIN 
exist := 0 ;
for i in c_admin loop
    exist := 1;
end loop;
END;

/
--------------------------------------------------------
--  DDL for Procedure SALES_NUMBER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."SALES_NUMBER" (p_id in products.refmg%type,nbr out number ) IS
Begin
SELECT COUNT(*) into nbr From orders INNER JOIN orderitems ON orders.orderid = orderitems.orderid
                WHERE orderitems.itemid = p_id AND orders.settled = 'delivered';

end;

/
--------------------------------------------------------
--  DDL for Procedure SHOW_CLIENTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."SHOW_CLIENTS" (rowCat OUT SYS_REFCURSOR) IS
begin
open rowcat for
SELECT *  FROM ANSSAIEN.clients  ORDER BY codect ;
end;

/
--------------------------------------------------------
--  DDL for Procedure SHOW_HISTORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."SHOW_HISTORY" (rowCat OUT SYS_REFCURSOR) IS
begin
open rowcat for
SELECT *  FROM ANSSAIEN.history  ORDER BY order_Date ;
end;

/
--------------------------------------------------------
--  DDL for Procedure SHOW_ORDERS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."SHOW_ORDERS" (rowCat OUT SYS_REFCURSOR) IS
begin
open rowcat for
SELECT *  FROM ANSSAIEN.orders  ORDER BY orderdate ;
end;

/
--------------------------------------------------------
--  DDL for Procedure SHOW_ORDERS_BY_CLIENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."SHOW_ORDERS_BY_CLIENT" (client_id in number ,rowCat OUT SYS_REFCURSOR) IS
begin
open rowcat for
SELECT orderid,orderdate,total  FROM ANSSAIEN.orders where clientid = client_id;
end;

/
--------------------------------------------------------
--  DDL for Procedure SHOW_ORDER_ITEMS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."SHOW_ORDER_ITEMS" (ord in number ,rowCat OUT SYS_REFCURSOR) IS
begin
open rowcat for
SELECT *  FROM ANSSAIEN.orderitems where orderid = ord;
end;

/
--------------------------------------------------------
--  DDL for Procedure SHOW_PRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."SHOW_PRODUCT" (rowCat OUT SYS_REFCURSOR) IS
begin
open rowcat for
SELECT *  FROM ANSSAIEN.products  ORDER BY puMG ;
end;

/
--------------------------------------------------------
--  DDL for Procedure TOP_5_CLIENTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."TOP_5_CLIENTS" (rowCat OUT SYS_REFCURSOR )
IS 
tover float;

begin 
tover := turnover();
open rowcat for
SELECT clientid,sum  
        FROM (SELECT clientid, SUM(total * (1-discount/100))*100/tover  as sum 
        FROM ORDERS
        where settled = 'delivered' 
        group by orders.clientid 
        order by sum DESC)
where rownum <= 5;
END;

/
--------------------------------------------------------
--  DDL for Procedure TOP_5_PRODUCTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."TOP_5_PRODUCTS" (rowCat OUT SYS_REFCURSOR )
IS 
tover float;
begin 
tover := Turnover();
open rowcat for
SELECT itemid,libellemg,sum 
FROM (
    SELECT itemid,libellemg,SUM ( totalttc* (1-discount/100))*100/tover  as sum 
    FROM ANSSAIEN.orderitems 
    inner join products on products.refmg = orderitems.itemid 
    where orderitems.orderid in(SELECT orderid from orders where settled ='delivered')
    group by orderitems.itemid, products.libellemg 
    order by sum DESC)
where rownum <= 5;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_CLIENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."UPDATE_CLIENT" (v_id in clients.codect%type , v_adr in clients.adressct%type , v_email in clients.emailct%type ,cmt in clients.commentct%type)IS
BEGIN
UPDATE clients set adressct = v_adr , emailct = v_email , commentct = cmt  where  codect = v_id; 
END;


/
--------------------------------------------------------
--  DDL for Procedure UPDATE_ORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."UPDATE_ORDER" (oID in number,cID in number,dis in float,statut in varchar) IS
begin
update orders set clientID = cID , discount = dis where orderId = oID;
if statut = 'delivered' then
update orders set settled =  statut where orderId = oID;
end if;
end;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_ORDERITEM
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."UPDATE_ORDERITEM" (oid in orders.orderid%type,iid in products.refmg%type,dis in float,Newqte in number) IS
pu number;
tva number;
begin

select pumg,tvamg into pu,tva from products where refmg = iid;
update orderitems set qte = Newqte , discount = dis , totalht = Newqte*pu ,totalttc =(Newqte*pu)*(1+tva/100) where orderid = oid and itemid = iid;
update_total_items(oid);
end;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_PRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."UPDATE_PRODUCT" (v_id products.refmg%type ,v_pu in products.pumg%type , v_tva in products.tvamg%type , v_stock in products.stock%type)IS
BEGIN
UPDATE products set pumg = v_pu , tvamg = v_tva , stock= v_stock where  refmg = v_id; 
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_TOTAL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."UPDATE_TOTAL" is
ttl float;
dis float;
ordid number;
begin
SELECT Max(orderid) into ordid from orders;
select (1-orders.discount/100) into dis from orders where orderid =ordid;
select sum(orderitems.totalttc)  into ttl
    from orderitems 
    where orderid = ordid;    
UPDATE orders set total = ttl where orderid = ordid;
UPdate history set total = ttl*dis where order_id = ordid;
end;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_TOTAL_ITEMS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "ANSSAIEN"."UPDATE_TOTAL_ITEMS" (ordr_id in orders.orderid%type )is
ttl float;
DisOrder float;
begin
select (1-orders.discount/100) into DisOrder from orders where orderid = ordr_id;

select sum (totalttc * (1-orderitems.discount/100))  into ttl from orderitems 
    where orderid = ordr_id;

UPDATE orders set total = ttl where orderid = ordr_id;
UPdate history set total = ttl*DisOrder where order_id = ordr_id;
end;

/
--------------------------------------------------------
--  DDL for Function EUROORDOLLAR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "ANSSAIEN"."EUROORDOLLAR" (amount IN float ,currency IN VARCHAR)
RETURN float 
IS 
BEGIN
if currency = 'euro' then
RETURN 10*amount;
else
RETURN 8*amount;
end if;
END;

/
--------------------------------------------------------
--  DDL for Function MAX_CLIENT_ACHAT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "ANSSAIEN"."MAX_CLIENT_ACHAT" (v_nomct  out clients.nomct%type , v_total out orders.total%type )
RETURN   NUMBER 
IS
v_codect  NUMBER;
BEGIN

SELECT clientid,SUM(total) into v_codect ,v_total
FROM ANSSAIEN.ORDERS
where settled = 'delivered'
group by anssaien.orders.clientid
having SUM(total) = (SELECT MAX(SUM(total))FROM ANSSAIEN.ORDERS where settled = 'delivered'
group by anssaien.orders.clientid) ;

SELECT nomct into v_nomct
        FROM ANSSAIEN.clients
        where codect =  v_codect;   
RETURN v_codect;
END;

/
--------------------------------------------------------
--  DDL for Function MAX_PRODUCT_CA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "ANSSAIEN"."MAX_PRODUCT_CA" (word_Product out products.libellemg%type ,ca_Product out orderitems.totalttc%type )
RETURN products.refmg%type
IS
code_Product products.libellemg%type;
BEGIN

SELECT itemid,libellemg,SUM(totalttc) into code_Product, word_Product ,ca_Product
FROM orderitems
inner join products on products.refmg = orderitems.itemid
where orderitems.orderid in (Select orderid from orders where settled  = 'delivered' )
group by orderitems.itemid, products.libellemg
having SUM(totalttc) = (SELECT MAX(SUM(totalttc))
                        FROM orderitems 
                        where orderitems.orderid in (Select orderid 
                        from orders 
                        where settled  = 'delivered' ) 
                        group by itemid);
RETURN code_Product;
END;

/
--------------------------------------------------------
--  DDL for Function MIN_CLIENT_ACHAT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "ANSSAIEN"."MIN_CLIENT_ACHAT" (v_nomct  out clients.nomct%type , v_total out orders.total%type )
RETURN   NUMBER 
IS
v_codect  NUMBER;
BEGIN

SELECT clientid,SUM(total) into v_codect ,v_total
FROM ANSSAIEN.ORDERS
where settled = 'delivered'
group by anssaien.orders.clientid
having SUM(total) = (SELECT min(SUM(total))FROM ANSSAIEN.ORDERS where settled = 'delivered' group by anssaien.orders.clientid);

SELECT nomct into v_nomct
        FROM ANSSAIEN.clients
        where codect =  v_codect;   

RETURN v_codect;
END;

/
--------------------------------------------------------
--  DDL for Function MIN_PRODUCT_CA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "ANSSAIEN"."MIN_PRODUCT_CA" (word_Product out products.libellemg%type ,ca_Product out orderitems.totalttc%type )
RETURN products.refmg%type
IS
code_Product products.libellemg%type;
BEGIN

SELECT itemid,libellemg,SUM(totalttc) into code_Product, word_Product ,ca_Product
        FROM orderitems
        inner join products on products.refmg = orderitems.itemid
        where orderitems.orderid in (Select orderid from orders where settled  = 'delivered' )
        group by orderitems.itemid, products.libellemg
        having SUM(totalttc) = (SELECT min(SUM(totalttc))
                                FROM orderitems     
                                where orderitems.orderid in (Select orderid from orders where settled  = 'delivered' )
                                group by itemid);
RETURN code_Product;
END;

/
--------------------------------------------------------
--  DDL for Function NB_ARTICLE_BY_CATEGORIE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "ANSSAIEN"."NB_ARTICLE_BY_CATEGORIE" ( categorieID IN ANSSAIEN.categories.codecat%type) 
RETURN INT
IS
nbArticle INT;
BEGIN
SELECT count(*) INTO nbArticle FROM products WHERE categoriemg = categorieID;
RETURN nbArticle;
END;

/
--------------------------------------------------------
--  DDL for Function NB_ORDER_BY_CLIENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "ANSSAIEN"."NB_ORDER_BY_CLIENT" (idc IN ANSSAIEN.clients.codect%type) 
RETURN INT
IS
nbOrderClient INT;
BEGIN
SELECT count(*) INTO nbOrderClient FROM orders WHERE clientID = idc;
RETURN nbOrderClient;
END;

/
--------------------------------------------------------
--  DDL for Function PRODUCT_TURNOVER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "ANSSAIEN"."PRODUCT_TURNOVER" (productID IN ANSSAIEN.products.refmg%type) --chiffre affaire
RETURN float
IS
proTurnover float; 
BEGIN
SELECT SUM(qte*pumg)INTO proTurnover
        FROM orders  
        INNER JOIN orderitems on orders.orderid = orderitems.orderid
        INNER JOIN products on orderitems.itemid = products.refmg    
        WHERE products.refmg = productID and orders.settled = 'delivered';
RETURN proTurnover;
END;

/
--------------------------------------------------------
--  DDL for Function TURNOVER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "ANSSAIEN"."TURNOVER" --chiffre affaire entreprise
RETURN float
IS
turnover float := 0;
BEGIN
SELECT SUM(TOTAL)into turnover FROM HISTORY where statut = 'delivered' AND order_date between  sysdate - 365 and sysdate ;

RETURN turnover;
END;

/
--------------------------------------------------------
--  Constraints for Table FAMILLES
--------------------------------------------------------

  ALTER TABLE "ANSSAIEN"."FAMILLES" MODIFY ("CODEFAM" NOT NULL ENABLE);
  ALTER TABLE "ANSSAIEN"."FAMILLES" ADD PRIMARY KEY ("CODEFAM")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CATEGORIES
--------------------------------------------------------

  ALTER TABLE "ANSSAIEN"."CATEGORIES" MODIFY ("CODECAT" NOT NULL ENABLE);
  ALTER TABLE "ANSSAIEN"."CATEGORIES" ADD PRIMARY KEY ("CODECAT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table REGIONS
--------------------------------------------------------

  ALTER TABLE "ANSSAIEN"."REGIONS" MODIFY ("CODERG" NOT NULL ENABLE);
  ALTER TABLE "ANSSAIEN"."REGIONS" ADD PRIMARY KEY ("CODERG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ORDERS
--------------------------------------------------------

  ALTER TABLE "ANSSAIEN"."ORDERS" MODIFY ("ORDERID" NOT NULL ENABLE);
  ALTER TABLE "ANSSAIEN"."ORDERS" ADD PRIMARY KEY ("ORDERID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CLIENTS
--------------------------------------------------------

  ALTER TABLE "ANSSAIEN"."CLIENTS" MODIFY ("CODECT" NOT NULL ENABLE);
  ALTER TABLE "ANSSAIEN"."CLIENTS" ADD PRIMARY KEY ("CODECT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ORDERITEMS
--------------------------------------------------------

  ALTER TABLE "ANSSAIEN"."ORDERITEMS" ADD PRIMARY KEY ("ORDERID", "ITEMID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRODUCTS
--------------------------------------------------------

  ALTER TABLE "ANSSAIEN"."PRODUCTS" ADD PRIMARY KEY ("REFMG")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CLIENTS
--------------------------------------------------------

  ALTER TABLE "ANSSAIEN"."CLIENTS" ADD CONSTRAINT "FK_REGION_CLIENTS" FOREIGN KEY ("REGIONCT")
	  REFERENCES "ANSSAIEN"."REGIONS" ("CODERG") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ORDERITEMS
--------------------------------------------------------

  ALTER TABLE "ANSSAIEN"."ORDERITEMS" ADD CONSTRAINT "FK_ORDERITEMS_ORDERS" FOREIGN KEY ("ORDERID")
	  REFERENCES "ANSSAIEN"."ORDERS" ("ORDERID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "ANSSAIEN"."ORDERITEMS" ADD CONSTRAINT "FK_ORDERITEMS_CLIENTS" FOREIGN KEY ("ITEMID")
	  REFERENCES "ANSSAIEN"."PRODUCTS" ("REFMG") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ORDERS
--------------------------------------------------------

  ALTER TABLE "ANSSAIEN"."ORDERS" ADD CONSTRAINT "FK_ORDERS_CLIENT" FOREIGN KEY ("CLIENTID")
	  REFERENCES "ANSSAIEN"."CLIENTS" ("CODECT") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUCTS
--------------------------------------------------------

  ALTER TABLE "ANSSAIEN"."PRODUCTS" ADD CONSTRAINT "FK_CATEGORIE_CATALOGUE" FOREIGN KEY ("CATEGORIEMG")
	  REFERENCES "ANSSAIEN"."CATEGORIES" ("CODECAT") ON DELETE CASCADE ENABLE;
  ALTER TABLE "ANSSAIEN"."PRODUCTS" ADD CONSTRAINT "FK_FAMILLE_CATALOGUE" FOREIGN KEY ("FAMILLEMG")
	  REFERENCES "ANSSAIEN"."FAMILLES" ("CODEFAM") ON DELETE CASCADE ENABLE;
